<launch>

    <!-- Joy node - reads data from joystick and publishes joy commands -->
    <node name="joystick" pkg="joy" type="joy_node"/>

    <!-- Teleop control node - reads joy command, publishes Twist message -->
    <node name="teleop_control" pkg="high_level_control" type="teleop_control.py"/>

    <!-- Drive motor control node - translates twist message into individual motor speeds -->
    <param name="wheel_separation" type="double" value="0.31"/>
    <param name="wheel_radius" type="double" value="0.108"/>
    <param name="max_in_lin_vel" type="double" value="1.0"/>
    <param name="max_in_ang_vel" type="double" value="1.0"/>
    <param name="max_out_lin_vel" type="double" value="0.5"/>
    <param name="max_out_ang_vel" type="double" value="1.0"/>
    <param name="output_mode" type="string" value="pwm"/>

    <node name="drive_motor_controller" pkg="drive_system" type="drive_motor_controller.py"/>

    <!-- Update node - reads mission control messages and updates them at a slower rate -->
    <param name="update_rate" type="int" value="1"/>

    <node name="update_node" pkg="update_node" type="update_node.py"/>

    <group>
        <node name="simulator" pkg="simulation_tools" type="path_tracking_sim.py"/>
    </group>

    <!--&lt;!&ndash; Declare raspberry pi as a machine to run nodes on &ndash;&gt;-->
    <!--<machine name="rpi" address="192.168.0.104" user="vur"/>-->

    <!--&lt;!&ndash; Load parameters for motor_control node onto server, run motor_control nodes on raspberry pi &ndash;&gt;-->
    <!--<rosparam command="load" file="$(find motor_control)/launch/example.yaml" />-->
    <!--<node machine="rpi" pkg="motor_control" type="motor_control_node" name="motor_control" respawn="false" />-->

</launch>